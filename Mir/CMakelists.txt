cmake_minimum_required(VERSION 3.10)

project(Mir)
# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
# Fetch dependencies
include(FetchContent)

# Find or fetch spdlog
find_package(spdlog QUIET)
if (NOT spdlog_FOUND)
    message(STATUS "spdlog not found, fetching from GitHub...")
    FetchContent_Declare(
      spdlog
      GIT_REPOSITORY https://github.com/gabime/spdlog.git
      GIT_TAG v1.x
    )
    FetchContent_MakeAvailable(spdlog)
endif()

# Find or fetch glfw
find_package(glfw3 QUIET)
if (NOT glfw3_FOUND)
    message(STATUS "glfw3 not found, fetching from GitHub...")
    set(GLFW_VERSION 3.4)
    FetchContent_Declare(
      glfw
      GIT_REPOSITORY https://github.com/glfw/glfw.git
      GIT_TAG ${GLFW_VERSION}
    )
    FetchContent_MakeAvailable(glfw)
endif()

# Find or fetch glad
find_package(glad QUIET)
if (NOT glad_FOUND)
    message(STATUS "glad not found, fetching from GitHub...")
    set(GLAD_VERSION c)
    FetchContent_Declare(
      glad
      GIT_REPOSITORY https://github.com/Dav1dde/glad.git
      GIT_TAG ${GLAD_VERSION}
    )
    FetchContent_MakeAvailable(glad)
endif()

# Find or fetch imgui
find_package(imgui QUIET)
if (NOT imgui_FOUND)
    message(STATUS "imgui not found, fetching from GitHub...")
    set(imgui_VERSION docking)
    FetchContent_Declare(
      imgui
      GIT_REPOSITORY https://github.com/ocornut/imgui.git
      GIT_TAG ${imgui_VERSION}
    )
    FetchContent_MakeAvailable(imgui)
endif()

# Add glad as a target
add_library(glad STATIC ${glad_SOURCE_DIR}/src/glad.c)
target_include_directories(glad PUBLIC ${glad_SOURCE_DIR}/include)

# Add imgui as a target
add_library(imgui STATIC
    ${imgui_SOURCE_DIR}/imgui.cpp
    ${imgui_SOURCE_DIR}/imgui_demo.cpp
    ${imgui_SOURCE_DIR}/imgui_draw.cpp
    ${imgui_SOURCE_DIR}/imgui_tables.cpp
    ${imgui_SOURCE_DIR}/imgui_widgets.cpp
)
target_include_directories(imgui PUBLIC ${imgui_SOURCE_DIR})
set(D3_SOURCE_FILES
        src/Mir/Application.cpp
        src/Mir/Log.cpp

        src/Mir/LayerStack.cpp
        src/Mir/Layer.cpp

        src/Mir/ImGui/ImGuiLayer.cpp

        src/Platform/Windows/WindowsWindow.cpp
        src/Platform/OpenGL/ImGuiOpenGLRenderer.cpp
        )

set(D3_HEADER_FILES
        src/Mir/Layer.h
        src/Mir/LayerStack.h
        src/Mir/Core.h
        src/Mir.h
        src/Mir/EntryPoint.h
        src/Mir/Window.h

        src/Mir/Events/Event.h
        src/Mir/Events/KeyEvent.h
        src/Mir/Events/MouseEvent.h
        src/Mir/Events/ApplicationEvent.h

        src/Mir/ImGui/ImGuiLayer.h

        src/Platform/Windows/WindowsWindow.h
        src/Platform/OpenGL/ImGuiOpenGLRenderer.h
        )

add_library(Mir SHARED ${D3_SOURCE_FILES} ${D3_HEADER_FILES})
target_link_libraries(Mir PRIVATE glfw glad spdlog::spdlog imgui)

# Use precompiled headers
target_precompile_headers(Mir PRIVATE src/Mirpch.h)



# Define a variable for the include directories
set(INCLUDE_DIRS
    ${CMAKE_CURRENT_SOURCE_DIR}/src
    ${CMAKE_CURRENT_SOURCE_DIR}/src/Mir
    ${CMAKE_CURRENT_SOURCE_DIR}/src/Platform/OpenGL
    ${CMAKE_CURRENT_SOURCE_DIR}/src/Platform/Windows
    ${CMAKE_CURRENT_SOURCE_DIR}/src/Events
    ${CMAKE_CURRENT_SOURCE_DIR}/src/ImGui
)


include_directories(${INCLUDE_DIRS})

# # EXTERNAL Includes
include_directories(${glfw_SOURCE_DIR}/include ${spdlog_SOURCE_DIR}/include)
include_directories(${glad_SOURCE_DIR}/include ${imgui_SOURCE_DIR})

# source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR}/src FILES ${D3_SOURCE_FILES} ${D3_HEADER_FILES})

# Set include directories for Mir target
target_include_directories(Mir
  PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/src
    ${glfw_SOURCE_DIR}/include
    ${glad_SOURCE_DIR}/include
    ${spdlog_SOURCE_DIR}/include
    ${imgui_SOURCE_DIR}
)

# Define macros
target_compile_definitions(Mir PRIVATE MIR_PLATFORM_WINDOWS MIR_BUILD_DLL MIR_ENABLE_ASSERTS GLFW_INCLUDE_NONE)
