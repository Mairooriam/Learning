cmake_minimum_required(VERSION 3.10)




if (MSVC)
    set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>")
endif()

project(Mir)
# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
# Fetch dependencies
include(FetchContent)

# Find or fetch spdlog
find_package(spdlog QUIET)
if (NOT spdlog_FOUND)
    message(STATUS "spdlog not found, fetching from GitHub...")
    FetchContent_Declare(
      spdlog
      GIT_REPOSITORY https://github.com/gabime/spdlog.git
      GIT_TAG v1.x
    )
    FetchContent_MakeAvailable(spdlog)
endif()

# Find or fetch glfw
find_package(glfw3 QUIET)
if (NOT glfw3_FOUND)
    message(STATUS "glfw3 not found, fetching from GitHub...")
    set(GLFW_VERSION 3.4)
    FetchContent_Declare(
      glfw
      GIT_REPOSITORY https://github.com/glfw/glfw.git
      GIT_TAG ${GLFW_VERSION}
    )
    FetchContent_MakeAvailable(glfw)
endif()

# Find or fetch glad
find_package(glad QUIET)
if (NOT glad_FOUND)
    message(STATUS "glad not found, fetching from GitHub...")
    set(GLAD_VERSION c)
    FetchContent_Declare(
      glad
      GIT_REPOSITORY https://github.com/Dav1dde/glad.git
      GIT_TAG ${GLAD_VERSION}
    )
    FetchContent_MakeAvailable(glad)
endif()

# Find or fetch imgui
find_package(imgui QUIET)
if (NOT imgui_FOUND)
    message(STATUS "imgui not found, fetching from GitHub...")
    set(imgui_VERSION docking)
    FetchContent_Declare(
      imgui
      GIT_REPOSITORY https://github.com/ocornut/imgui.git
      GIT_TAG ${imgui_VERSION}
    )
    FetchContent_MakeAvailable(imgui)
endif()

# Add glad as a target
add_library(glad STATIC ${glad_SOURCE_DIR}/src/glad.c)
target_include_directories(glad PUBLIC ${glad_SOURCE_DIR}/include)

# Suppress specific warnings for glad.c
if (CMAKE_C_COMPILER_ID STREQUAL "GNU" OR CMAKE_C_COMPILER_ID STREQUAL "Clang")
    set_source_files_properties(${glad_SOURCE_DIR}/src/glad.c PROPERTIES COMPILE_FLAGS "-Wno-pedantic")
elseif (MSVC)
    set_source_files_properties(${glad_SOURCE_DIR}/src/glad.c PROPERTIES COMPILE_FLAGS "/wd4055")
endif()

# Add imgui as a target
add_library(imgui STATIC
    ${imgui_SOURCE_DIR}/imgui.cpp
    ${imgui_SOURCE_DIR}/imgui_draw.cpp
    ${imgui_SOURCE_DIR}/imgui_widgets.cpp
    ${imgui_SOURCE_DIR}/imgui_tables.cpp
    ${imgui_SOURCE_DIR}/imgui_demo.cpp
    ${imgui_SOURCE_DIR}/backends/imgui_impl_opengl3.cpp
    ${imgui_SOURCE_DIR}/backends/imgui_impl_glfw.cpp
)
target_include_directories(imgui PUBLIC ${imgui_SOURCE_DIR} ${imgui_SOURCE_DIR}/backends)

# Link FreeGLUT to imgui
target_link_libraries(imgui ${GLUT_LIBRARIES})

# Find or fetch imgui
find_package(glm QUIET)
if (NOT glm_FOUND)
    message(STATUS "glm not found, fetching from GitHub...")
    set(glm_VERSION master)
    FetchContent_Declare(
        glm
      GIT_REPOSITORY https://github.com/g-truc/glm.git
      GIT_TAG ${glm_VERSION}
    )
    FetchContent_MakeAvailable(glm)
endif()

find_package(open62541pp CONFIG REQUIRED)

## SQLITE ##
add_subdirectory(External/SQLiteCpp)

## JSON ##
add_subdirectory(External/jsonParser)


# Find Python
find_package(Python3 COMPONENTS Development REQUIRED)

set(D3_SOURCE_FILES
        src/Mir/Application.cpp
        src/Mir/Log.cpp

        src/Mir/LayerStack.cpp
        src/Mir/Layer.cpp

        src/Mir/ImGui/ImGuiLayer.cpp
        src/Mir/ImGui/ImguiWidgets.cpp

        src/Mir/b&rParser/parser.cpp

        src/Mir/Opcua/OpcuaClient.cpp

        src/Mir/CPython/PythonTool.cpp

        src/Mir/Renderer/Buffer.cpp
        src/Mir/Renderer/OrthographicCamera.cpp
        src/Mir/Renderer/RenderCommand.cpp
        src/Mir/Renderer/Renderer.cpp
        src/Mir/Renderer/RendererAPI.cpp
        src/Mir/Renderer/Shader.cpp
        src/Mir/Renderer/VertexArray.cpp

        src/Platform/Windows/WindowsWindow.cpp
        src/Platform/Windows/WindowsInput.cpp
        src/Platform/OpenGL/OpenGLBuffer.cpp
        src/Platform/OpenGL/OpenGLContext.cpp
        src/Platform/OpenGL/OpenGLVertexArray.cpp
        src/Platform/OpenGL/OpenGLRendererAPI.cpp
        )

set(D3_HEADER_FILES
        src/Mir/Layer.h
        src/Mir/LayerStack.h
        src/Mir/Core.h
        src/Mir.h
        src/Mir/EntryPoint.h
        src/Mir/Window.h
        src/Mir/Input.h

        src/Mir/Core/Timestep.h

        src/Mir/Opcua/OpcuaClient.h

        src/Mir/Events/Event.h
        src/Mir/Events/KeyEvent.h
        src/Mir/Events/MouseEvent.h
        src/Mir/Events/ApplicationEvent.h

        src/Mir/Renderer/Buffer.h
        src/Mir/Renderer/GraphicsContext.h
        src/Mir/Renderer/OrthographicCamera.h
        src/Mir/Renderer/RenderCommand.h
        src/Mir/Renderer/Renderer.h
        src/Mir/Renderer/RendererAPI.h
        src/Mir/Renderer/Shader.h
        src/Mir/Renderer/VertexArray.h

        src/Mir/ImGui/ImGuiLayer.h
        src/Mir/ImGui/ImguiWidgets.h

        src/Mir/b&rParser/parser.h

        src/Mir/CPython/PythonTool.h

        src/Platform/Windows/WindowsWindow.h
        src/Platform/Windows/WindowsInput.h
        src/Platform/OpenGL/OpenGLBuffer.h
        src/Platform/OpenGL/OpenGLContext.h
        src/Platform/OpenGL/OpenGLVertexArray.h
        src/Platform/OpenGL/OpenGLRendererAPI.h

        External/IconsFontAwesome5/IconsFontAwesome5.h
        )

add_library(Mir STATIC ${D3_SOURCE_FILES} ${D3_HEADER_FILES})
target_link_libraries(Mir PUBLIC glfw glad spdlog::spdlog imgui open62541pp::open62541pp ${Python3_LIBRARIES})

# Use precompiled headers
target_precompile_headers(Mir PRIVATE src/Mirpch.h)



# Define a variable for the include directories
set(INCLUDE_DIRS
    ${CMAKE_CURRENT_SOURCE_DIR}/src
    ${CMAKE_CURRENT_SOURCE_DIR}/src/Mir
    ${CMAKE_CURRENT_SOURCE_DIR}/src/Platform/OpenGL
    ${CMAKE_CURRENT_SOURCE_DIR}/src/Platform/Windows
    ${CMAKE_CURRENT_SOURCE_DIR}/src/Opcua
    ${CMAKE_CURRENT_SOURCE_DIR}/src/Events
    ${CMAKE_CURRENT_SOURCE_DIR}/src/b&rParser

)


include_directories(${INCLUDE_DIRS})

# # EXTERNAL Includes
include_directories(${glfw_SOURCE_DIR}/include ${spdlog_SOURCE_DIR}/include)
include_directories(${glad_SOURCE_DIR}/include ${imgui_SOURCE_DIR} ${imgui_SOURCE_DIR}/backends)
include_directories(${glm_SOURCE_DIR})
# source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR}/src FILES ${D3_SOURCE_FILES} ${D3_HEADER_FILES})

# Set include directories for Mir target
target_include_directories(Mir
  PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}/src
    ${glfw_SOURCE_DIR}/include
    ${glad_SOURCE_DIR}/include
    ${spdlog_SOURCE_DIR}/include
    ${imgui_SOURCE_DIR}
    ${imgui_SOURCE_DIR}/backends
    ${glm_SOURCE_DIR}
    ${Python3_INCLUDE_DIRS}
    ${CMAKE_CURRENT_SOURCE_DIR}/External/IconsFontAwesome5
)



# Define macros
target_compile_definitions(Mir PRIVATE MIR_PLATFORM_WINDOWS MIR_BUILD_DLL MIR_ENABLE_ASSERTS GLFW_INCLUDE_NONE)
