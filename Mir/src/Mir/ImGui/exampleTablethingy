
        // ImGui::Begin(".iom editor");
        // brVarConfigCollection VarConfigCollection = brparser.getVarConfig();
        
        // // for now just bool. maybe add bit operations later for compact flags
        // static bool displayCellSize = false;
        // if (ImGui::TreeNode("Table Flags")) {
        //     ImGui::Checkbox("display table cell size", &displayCellSize);
        //     ImGui::TreePop();
        // }

        // static bool treeOpen = false;
        // if (!VarConfigCollection.empty())
        // {
        //     ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(1.0f, 1.0f));
        //     std::string label = "IO Data Table###IO Data Table";
        //     treeOpen = ImGui::CollapsingHeader(label.c_str());
        //     ImGui::PopStyleVar();
        //     ImGui::Indent();
        // }
        

        // if (treeOpen)
        // {
        //     size_t i = 0;
        //     for (auto &varConfig : VarConfigCollection){
        //         ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(1.0f, 1.0f));
        //         std::string label = "IO Data \t\t"  + varConfig.comment + "###IO Data Table" + std::to_string(i);
        //         bool innerTreeOpen = ImGui::CollapsingHeader(label.c_str());
        //         ImGui::PopStyleVar();
    
        //         if (innerTreeOpen)
        //         {
        //             static float nameWidth = 400.0f;
        //             static float typeWidth = 78.0f;
        //             static float valueWidth = 60.0f;
                    
                
        //             if (displayCellSize)
        //             {
        //                 float availWidth = ImGui::GetContentRegionAvail().x;
        //                 ImGui::Text("Available width: %.1f", availWidth);
        //             }

                    
        //             ImGui::Indent();
        //             ImGui::PushStyleVar(ImGuiStyleVar_CellPadding, ImVec2(0.0f, 2.0f));
        //             if (ImGui::BeginTable("Node", 4, tableFlags)) 
        //             {
        //                 ImGui::TableSetupColumn("IO Adress", ImGuiTableColumnFlags_WidthFixed, nameWidth);
        //                 ImGui::TableSetupColumn("Process Variable", ImGuiTableColumnFlags_WidthFixed, typeWidth);
        //                 ImGui::TableSetupColumn("Type", ImGuiTableColumnFlags_WidthFixed, valueWidth);
        //                 ImGui::TableSetupColumn("Comment", ImGuiTableColumnFlags_WidthFixed, valueWidth);
        //                 ImGui::TableHeadersRow();
    
        //                 ImGui::TableNextRow();

        //                 if (displayCellSize)
        //                 {
        //                     for (int column = 0; column < 4; column++) {
        //                         ImGui::TableSetColumnIndex(column);
        //                         ImGui::Text("(w: %5.1f)", ImGui::GetColumnWidth(column));
        //                     }     
        //                 }
                        
   
        //                 MirUI::RenderTableRows(varConfig,i);
        //                 ImGui::EndTable();
        //             }
                    
        //             ImGui::PopStyleVar();
        //             ImGui::Unindent();
        //         }
        //         i++;
        //     }
        //     ImGui::Unindent();
        // }
        // ImGui::End();